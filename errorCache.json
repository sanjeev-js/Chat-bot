{
    "python": [
        {
            "description": "The base class for all built-in exceptions.  It is not meant to be directly\ninherited by user-defined classes (for that, use Exception).  If\nstr() is called on an instance of this class, the representation of\nthe argument(s) to the instance are returned, or the empty string when\nthere were no arguments.\n\n\nargs\u00c2\u00b6\nThe tuple of arguments given to the exception constructor.  Some built-in\nexceptions (like OSError) expect a certain number of arguments and\nassign a special meaning to the elements of this tuple, while others are\nusually called only with a single string giving an error message.\n\n\n\nwith_traceback(tb)\u00c2\u00b6\nThis method sets tb as the new traceback for the exception and returns\nthe exception object.  It is usually used in exception handling code like\nthis:\ntry:\n    ...\nexcept SomeException:\n    tb = sys.exc_info()[2]\n    raise OtherException(...).with_traceback(tb)",
            "errorName": "BaseException",
            "example": "",
            "id": 1,
            "url": []
        },
        {
            "description": "The tuple of arguments given to the exception constructor.  Some built-in\nexceptions (like OSError) expect a certain number of arguments and\nassign a special meaning to the elements of this tuple, while others are\nusually called only with a single string giving an error message.",
            "errorName": "args",
            "example": "",
            "id": 2,
            "url": []
        },
        {
            "description": "This method sets tb as the new traceback for the exception and returns\nthe exception object.  It is usually used in exception handling code like\nthis:\ntry:\n    ...\nexcept SomeException:\n    tb = sys.exc_info()[2]\n    raise OtherException(...).with_traceback(tb)",
            "errorName": "with_traceback",
            "example": "",
            "id": 3,
            "url": []
        },
        {
            "description": "All built-in, non-system-exiting exceptions are derived from this class.  All\nuser-defined exceptions should also be derived from this class.",
            "errorName": "Exception",
            "example": "",
            "id": 4,
            "url": []
        },
        {
            "description": "The base class for those built-in exceptions that are raised for various\narithmetic errors: OverflowError, ZeroDivisionError,\nFloatingPointError.",
            "errorName": "ArithmeticError",
            "example": "",
            "id": 5,
            "url": []
        },
        {
            "description": "Raised when a buffer related operation cannot be\nperformed.",
            "errorName": "BufferError",
            "example": "",
            "id": 6,
            "url": []
        },
        {
            "description": "The base class for the exceptions that are raised when a key or index used on\na mapping or sequence is invalid: IndexError, KeyError.  This\ncan be raised directly by codecs.lookup().",
            "errorName": "LookupError",
            "example": "",
            "id": 7,
            "url": []
        },
        {
            "description": "Raised when an assert statement fails.",
            "errorName": "AssertionError",
            "example": "",
            "id": 8,
            "url": []
        },
        {
            "description": "Raised when an attribute reference (see Attribute references) or\nassignment fails.  (When an object does not support attribute references or\nattribute assignments at all, TypeError is raised.)",
            "errorName": "AttributeError",
            "example": "",
            "id": 9,
            "url": []
        },
        {
            "description": "Raised when the input() function hits an end-of-file condition (EOF)\nwithout reading any data. (N.B.: the io.IOBase.read() and\nio.IOBase.readline() methods return an empty string when they hit EOF.)",
            "errorName": "EOFError",
            "example": "",
            "id": 10,
            "url": []
        },
        {
            "description": "Not currently used.",
            "errorName": "FloatingPointError",
            "example": "",
            "id": 11,
            "url": []
        },
        {
            "description": "Raised when a generator or coroutine is closed;\nsee generator.close() and coroutine.close().  It\ndirectly inherits from BaseException instead of Exception since\nit is technically not an error.",
            "errorName": "GeneratorExit",
            "example": "",
            "id": 12,
            "url": []
        },
        {
            "description": "Raised when the import statement has troubles trying to\nload a module.  Also raised when the \u00e2\u0080\u009cfrom list\u00e2\u0080\u009d in from ... import\nhas a name that cannot be found.\nThe name and path attributes can be set using keyword-only\narguments to the constructor. When set they represent the name of the module\nthat was attempted to be imported and the path to any file which triggered\nthe exception, respectively.\n\nChanged in version 3.3: Added the name and path attributes.",
            "errorName": "ImportError",
            "example": "",
            "id": 13,
            "url": []
        },
        {
            "description": "A subclass of ImportError which is raised by import\nwhen a module could not be located.  It is also raised when None\nis found in sys.modules.\n\nNew in version 3.6.",
            "errorName": "ModuleNotFoundError",
            "example": "",
            "id": 14,
            "url": []
        },
        {
            "description": "Raised when a sequence subscript is out of range.  (Slice indices are\nsilently truncated to fall in the allowed range; if an index is not an\ninteger, TypeError is raised.)",
            "errorName": "IndexError",
            "example": "",
            "id": 15,
            "url": []
        },
        {
            "description": "Raised when a mapping (dictionary) key is not found in the set of existing keys.",
            "errorName": "KeyError",
            "example": "",
            "id": 16,
            "url": []
        },
        {
            "description": "Raised when the user hits the interrupt key (normally Control-C or\nDelete).  During execution, a check for interrupts is made\nregularly. The exception inherits from BaseException so as to not be\naccidentally caught by code that catches Exception and thus prevent\nthe interpreter from exiting.",
            "errorName": "KeyboardInterrupt",
            "example": "",
            "id": 17,
            "url": []
        },
        {
            "description": "Raised when an operation runs out of memory but the situation may still be\nrescued (by deleting some objects).  The associated value is a string indicating\nwhat kind of (internal) operation ran out of memory. Note that because of the\nunderlying memory management architecture (C\u00e2\u0080\u0099s malloc() function), the\ninterpreter may not always be able to completely recover from this situation; it\nnevertheless raises an exception so that a stack traceback can be printed, in\ncase a run-away program was the cause.",
            "errorName": "MemoryError",
            "example": "",
            "id": 18,
            "url": []
        },
        {
            "description": "Raised when a local or global name is not found.  This applies only to\nunqualified names.  The associated value is an error message that includes the\nname that could not be found.",
            "errorName": "NameError",
            "example": "",
            "id": 19,
            "url": []
        },
        {
            "description": "This exception is derived from RuntimeError.  In user defined base\nclasses, abstract methods should raise this exception when they require\nderived classes to override the method, or while the class is being\ndeveloped to indicate that the real implementation still needs to be added.\n\nNote\nIt should not be used to indicate that an operator or method is not\nmeant to be supported at all \u00e2\u0080\u0093 in that case either leave the operator /\nmethod undefined or, if a subclass, set it to None.\n\n\nNote\nNotImplementedError and NotImplemented are not interchangeable,\neven though they have similar names and purposes.  See\nNotImplemented for details on when to use it.",
            "errorName": "NotImplementedError",
            "example": "",
            "id": 20,
            "url": []
        },
        {
            "description": "This exception is raised when a system function returns a system-related\nerror, including I/O failures such as \u00e2\u0080\u009cfile not found\u00e2\u0080\u009d or \u00e2\u0080\u009cdisk full\u00e2\u0080\u009d\n(not for illegal argument types or other incidental errors).\nThe second form of the constructor sets the corresponding attributes,\ndescribed below.  The attributes default to None if not\nspecified.  For backwards compatibility, if three arguments are passed,\nthe args attribute contains only a 2-tuple\nof the first two constructor arguments.\nThe constructor often actually returns a subclass of OSError, as\ndescribed in OS exceptions below.  The particular subclass depends on\nthe final errno value.  This behaviour only occurs when\nconstructing OSError directly or via an alias, and is not\ninherited when subclassing.\n\n\nerrno\u00c2\u00b6\nA numeric error code from the C variable errno.\n\n\n\nwinerror\u00c2\u00b6\nUnder Windows, this gives you the native\nWindows error code.  The errno attribute is then an approximate\ntranslation, in POSIX terms, of that native error code.\nUnder Windows, if the winerror constructor argument is an integer,\nthe errno attribute is determined from the Windows error code,\nand the errno argument is ignored.  On other platforms, the\nwinerror argument is ignored, and the winerror attribute\ndoes not exist.\n\n\n\nstrerror\u00c2\u00b6\nThe corresponding error message, as provided by\nthe operating system.  It is formatted by the C\nfunctions perror() under POSIX, and FormatMessage()\nunder Windows.\n\n\n\nfilename\u00c2\u00b6\n\nfilename2\u00c2\u00b6\nFor exceptions that involve a file system path (such as open() or\nos.unlink()), filename is the file name passed to the function.\nFor functions that involve two file system paths (such as\nos.rename()), filename2 corresponds to the second\nfile name passed to the function.\n\n\nChanged in version 3.3: EnvironmentError, IOError, WindowsError,\nsocket.error, select.error and\nmmap.error have been merged into OSError, and the\nconstructor may return a subclass.\n\n\nChanged in version 3.4: The filename attribute is now the original file name passed to\nthe function, instead of the name encoded to or decoded from the\nfilesystem encoding.  Also, the filename2 constructor argument and\nattribute was added.",
            "errorName": "OSError",
            "example": "",
            "id": 21,
            "url": []
        },
        {
            "description": "A numeric error code from the C variable errno.",
            "errorName": "errno",
            "example": "",
            "id": 22,
            "url": []
        },
        {
            "description": "Under Windows, this gives you the native\nWindows error code.  The errno attribute is then an approximate\ntranslation, in POSIX terms, of that native error code.\nUnder Windows, if the winerror constructor argument is an integer,\nthe errno attribute is determined from the Windows error code,\nand the errno argument is ignored.  On other platforms, the\nwinerror argument is ignored, and the winerror attribute\ndoes not exist.",
            "errorName": "winerror",
            "example": "",
            "id": 23,
            "url": []
        },
        {
            "description": "The corresponding error message, as provided by\nthe operating system.  It is formatted by the C\nfunctions perror() under POSIX, and FormatMessage()\nunder Windows.",
            "errorName": "strerror",
            "example": "",
            "id": 24,
            "url": []
        },
        {
            "description": "For exceptions that involve a file system path (such as open() or\nos.unlink()), filename is the file name passed to the function.\nFor functions that involve two file system paths (such as\nos.rename()), filename2 corresponds to the second\nfile name passed to the function.",
            "errorName": "filename",
            "example": "",
            "id": 25,
            "url": []
        },
        {
            "description": "Raised when the result of an arithmetic operation is too large to be\nrepresented.  This cannot occur for integers (which would rather raise\nMemoryError than give up).  However, for historical reasons,\nOverflowError is sometimes raised for integers that are outside a required\nrange.   Because of the lack of standardization of floating point exception\nhandling in C, most floating point operations are not checked.",
            "errorName": "OverflowError",
            "example": "",
            "id": 26,
            "url": []
        },
        {
            "description": "This exception is derived from RuntimeError.  It is raised when the\ninterpreter detects that the maximum recursion depth (see\nsys.getrecursionlimit()) is exceeded.\n\nNew in version 3.5: Previously, a plain RuntimeError was raised.",
            "errorName": "RecursionError",
            "example": "",
            "id": 27,
            "url": []
        },
        {
            "description": "This exception is raised when a weak reference proxy, created by the\nweakref.proxy() function, is used to access an attribute of the referent\nafter it has been garbage collected. For more information on weak references,\nsee the weakref module.",
            "errorName": "ReferenceError",
            "example": "",
            "id": 28,
            "url": []
        },
        {
            "description": "Raised when an error is detected that doesn\u00e2\u0080\u0099t fall in any of the other\ncategories.  The associated value is a string indicating what precisely went\nwrong.",
            "errorName": "RuntimeError",
            "example": "",
            "id": 29,
            "url": []
        },
        {
            "description": "Raised by built-in function next() and an iterator\u00e2\u0080\u0099s\n__next__() method to signal that there are no further\nitems produced by the iterator.\nThe exception object has a single attribute value, which is\ngiven as an argument when constructing the exception, and defaults\nto None.\nWhen a generator or coroutine function\nreturns, a new StopIteration instance is\nraised, and the value returned by the function is used as the\nvalue parameter to the constructor of the exception.\nIf a generator code directly or indirectly raises StopIteration,\nit is converted into a RuntimeError (retaining the\nStopIteration as the new exception\u00e2\u0080\u0099s cause).\n\nChanged in version 3.3: Added value attribute and the ability for generator functions to\nuse it to return a value.\n\n\nChanged in version 3.5: Introduced the RuntimeError transformation via\nfrom __future__ import generator_stop, see PEP 479.\n\n\nChanged in version 3.7: Enable PEP 479 for all code by default: a StopIteration\nerror raised in a generator is transformed into a RuntimeError.",
            "errorName": "StopIteration",
            "example": "",
            "id": 30,
            "url": []
        },
        {
            "description": "Must be raised by __anext__() method of an\nasynchronous iterator object to stop the iteration.\n\nNew in version 3.5.",
            "errorName": "StopAsyncIteration",
            "example": "",
            "id": 31,
            "url": []
        },
        {
            "description": "Raised when the parser encounters a syntax error.  This may occur in an\nimport statement, in a call to the built-in functions exec()\nor eval(), or when reading the initial script or standard input\n(also interactively).\nInstances of this class have attributes filename, lineno,\noffset and text for easier access to the details.  str()\nof the exception instance returns only the message.",
            "errorName": "SyntaxError",
            "example": "",
            "id": 32,
            "url": []
        },
        {
            "description": "Base class for syntax errors related to incorrect indentation.  This is a\nsubclass of SyntaxError.",
            "errorName": "IndentationError",
            "example": "",
            "id": 33,
            "url": []
        },
        {
            "description": "Raised when indentation contains an inconsistent use of tabs and spaces.\nThis is a subclass of IndentationError.",
            "errorName": "TabError",
            "example": "",
            "id": 34,
            "url": []
        },
        {
            "description": "Raised when the interpreter finds an internal error, but the situation does not\nlook so serious to cause it to abandon all hope. The associated value is a\nstring indicating what went wrong (in low-level terms).\nYou should report this to the author or maintainer of your Python interpreter.\nBe sure to report the version of the Python interpreter (sys.version; it is\nalso printed at the start of an interactive Python session), the exact error\nmessage (the exception\u00e2\u0080\u0099s associated value) and if possible the source of the\nprogram that triggered the error.",
            "errorName": "SystemError",
            "example": "",
            "id": 35,
            "url": []
        },
        {
            "description": "This exception is raised by the sys.exit() function.  It inherits from\nBaseException instead of Exception so that it is not accidentally\ncaught by code that catches Exception.  This allows the exception to\nproperly propagate up and cause the interpreter to exit.  When it is not\nhandled, the Python interpreter exits; no stack traceback is printed.  The\nconstructor accepts the same optional argument passed to sys.exit().\nIf the value is an integer, it specifies the system exit status (passed to\nC\u00e2\u0080\u0099s exit() function); if it is None, the exit status is zero; if\nit has another type (such as a string), the object\u00e2\u0080\u0099s value is printed and\nthe exit status is one.\nA call to sys.exit() is translated into an exception so that clean-up\nhandlers (finally clauses of try statements) can be\nexecuted, and so that a debugger can execute a script without running the risk\nof losing control.  The os._exit() function can be used if it is\nabsolutely positively necessary to exit immediately (for example, in the child\nprocess after a call to os.fork()).\n\n\ncode\u00c2\u00b6\nThe exit status or error message that is passed to the constructor.\n(Defaults to None.)",
            "errorName": "SystemExit",
            "example": "",
            "id": 36,
            "url": []
        },
        {
            "description": "The exit status or error message that is passed to the constructor.\n(Defaults to None.)",
            "errorName": "code",
            "example": "",
            "id": 37,
            "url": []
        },
        {
            "description": "Raised when an operation or function is applied to an object of inappropriate\ntype.  The associated value is a string giving details about the type mismatch.\nThis exception may be raised by user code to indicate that an attempted\noperation on an object is not supported, and is not meant to be. If an object\nis meant to support a given operation but has not yet provided an\nimplementation, NotImplementedError is the proper exception to raise.\nPassing arguments of the wrong type (e.g. passing a list when an\nint is expected) should result in a TypeError, but passing\narguments with the wrong value (e.g. a number outside expected boundaries)\nshould result in a ValueError.",
            "errorName": "TypeError",
            "example": "",
            "id": 38,
            "url": []
        },
        {
            "description": "Raised when a reference is made to a local variable in a function or method, but\nno value has been bound to that variable.  This is a subclass of\nNameError.",
            "errorName": "UnboundLocalError",
            "example": "",
            "id": 39,
            "url": []
        },
        {
            "description": "Raised when a Unicode-related encoding or decoding error occurs.  It is a\nsubclass of ValueError.\nUnicodeError has attributes that describe the encoding or decoding\nerror.  For example, err.object[err.start:err.end] gives the particular\ninvalid input that the codec failed on.\n\n\nencoding\u00c2\u00b6\nThe name of the encoding that raised the error.\n\n\n\nreason\u00c2\u00b6\nA string describing the specific codec error.\n\n\n\nobject\u00c2\u00b6\nThe object the codec was attempting to encode or decode.\n\n\n\nstart\u00c2\u00b6\nThe first index of invalid data in object.\n\n\n\nend\u00c2\u00b6\nThe index after the last invalid data in object.",
            "errorName": "UnicodeError",
            "example": "",
            "id": 40,
            "url": []
        },
        {
            "description": "The name of the encoding that raised the error.",
            "errorName": "encoding",
            "example": "",
            "id": 41,
            "url": []
        },
        {
            "description": "A string describing the specific codec error.",
            "errorName": "reason",
            "example": "",
            "id": 42,
            "url": []
        },
        {
            "description": "The object the codec was attempting to encode or decode.",
            "errorName": "object",
            "example": "",
            "id": 43,
            "url": []
        },
        {
            "description": "The first index of invalid data in object.",
            "errorName": "start",
            "example": "",
            "id": 44,
            "url": []
        },
        {
            "description": "The index after the last invalid data in object.",
            "errorName": "end",
            "example": "",
            "id": 45,
            "url": []
        },
        {
            "description": "Raised when a Unicode-related error occurs during encoding.  It is a subclass of\nUnicodeError.",
            "errorName": "UnicodeEncodeError",
            "example": "",
            "id": 46,
            "url": []
        },
        {
            "description": "Raised when a Unicode-related error occurs during decoding.  It is a subclass of\nUnicodeError.",
            "errorName": "UnicodeDecodeError",
            "example": "",
            "id": 47,
            "url": []
        },
        {
            "description": "Raised when a Unicode-related error occurs during translating.  It is a subclass\nof UnicodeError.",
            "errorName": "UnicodeTranslateError",
            "example": "",
            "id": 48,
            "url": []
        },
        {
            "description": "Raised when an operation or function receives an argument that has the\nright type but an inappropriate value, and the situation is not described by a\nmore precise exception such as IndexError.",
            "errorName": "ValueError",
            "example": "",
            "id": 49,
            "url": []
        },
        {
            "description": "Raised when the second argument of a division or modulo operation is zero.  The\nassociated value is a string indicating the type of the operands and the\noperation.",
            "errorName": "ZeroDivisionError",
            "example": "",
            "id": 50,
            "url": []
        },
        {
            "description": "",
            "errorName": "EnvironmentError",
            "example": "",
            "id": 51,
            "url": []
        },
        {
            "description": "",
            "errorName": "IOError",
            "example": "",
            "id": 52,
            "url": []
        },
        {
            "description": "Only available on Windows.",
            "errorName": "WindowsError",
            "example": "",
            "id": 53,
            "url": []
        },
        {
            "description": "Raised when an operation would block on an object (e.g. socket) set\nfor non-blocking operation.\nCorresponds to errno EAGAIN, EALREADY,\nEWOULDBLOCK and EINPROGRESS.\nIn addition to those of OSError, BlockingIOError can have\none more attribute:\n\n\ncharacters_written\u00c2\u00b6\nAn integer containing the number of characters written to the stream\nbefore it blocked.  This attribute is available when using the\nbuffered I/O classes from the io module.",
            "errorName": "BlockingIOError",
            "example": "",
            "id": 54,
            "url": []
        },
        {
            "description": "An integer containing the number of characters written to the stream\nbefore it blocked.  This attribute is available when using the\nbuffered I/O classes from the io module.",
            "errorName": "characters_written",
            "example": "",
            "id": 55,
            "url": []
        },
        {
            "description": "Raised when an operation on a child process failed.\nCorresponds to errno ECHILD.",
            "errorName": "ChildProcessError",
            "example": "",
            "id": 56,
            "url": []
        },
        {
            "description": "A base class for connection-related issues.\nSubclasses are BrokenPipeError, ConnectionAbortedError,\nConnectionRefusedError and ConnectionResetError.",
            "errorName": "ConnectionError",
            "example": "",
            "id": 57,
            "url": []
        },
        {
            "description": "A subclass of ConnectionError, raised when trying to write on a\npipe while the other end has been closed, or trying to write on a socket\nwhich has been shutdown for writing.\nCorresponds to errno EPIPE and ESHUTDOWN.",
            "errorName": "BrokenPipeError",
            "example": "",
            "id": 58,
            "url": []
        },
        {
            "description": "A subclass of ConnectionError, raised when a connection attempt\nis aborted by the peer.\nCorresponds to errno ECONNABORTED.",
            "errorName": "ConnectionAbortedError",
            "example": "",
            "id": 59,
            "url": []
        },
        {
            "description": "A subclass of ConnectionError, raised when a connection attempt\nis refused by the peer.\nCorresponds to errno ECONNREFUSED.",
            "errorName": "ConnectionRefusedError",
            "example": "",
            "id": 60,
            "url": []
        },
        {
            "description": "A subclass of ConnectionError, raised when a connection is\nreset by the peer.\nCorresponds to errno ECONNRESET.",
            "errorName": "ConnectionResetError",
            "example": "",
            "id": 61,
            "url": []
        },
        {
            "description": "Raised when trying to create a file or directory which already exists.\nCorresponds to errno EEXIST.",
            "errorName": "FileExistsError",
            "example": "",
            "id": 62,
            "url": []
        },
        {
            "description": "Raised when a file or directory is requested but doesn\u00e2\u0080\u0099t exist.\nCorresponds to errno ENOENT.",
            "errorName": "FileNotFoundError",
            "example": "",
            "id": 63,
            "url": []
        },
        {
            "description": "Raised when a system call is interrupted by an incoming signal.\nCorresponds to errno EINTR.\n\nChanged in version 3.5: Python now retries system calls when a syscall is interrupted by a\nsignal, except if the signal handler raises an exception (see PEP 475\nfor the rationale), instead of raising InterruptedError.",
            "errorName": "InterruptedError",
            "example": "",
            "id": 64,
            "url": []
        },
        {
            "description": "Raised when a file operation (such as os.remove()) is requested\non a directory.\nCorresponds to errno EISDIR.",
            "errorName": "IsADirectoryError",
            "example": "",
            "id": 65,
            "url": []
        },
        {
            "description": "Raised when a directory operation (such as os.listdir()) is requested\non something which is not a directory.\nCorresponds to errno ENOTDIR.",
            "errorName": "NotADirectoryError",
            "example": "",
            "id": 66,
            "url": []
        },
        {
            "description": "Raised when trying to run an operation without the adequate access\nrights - for example filesystem permissions.\nCorresponds to errno EACCES and EPERM.",
            "errorName": "PermissionError",
            "example": "",
            "id": 67,
            "url": []
        },
        {
            "description": "Raised when a given process doesn\u00e2\u0080\u0099t exist.\nCorresponds to errno ESRCH.",
            "errorName": "ProcessLookupError",
            "example": "",
            "id": 68,
            "url": []
        },
        {
            "description": "Raised when a system function timed out at the system level.\nCorresponds to errno ETIMEDOUT.",
            "errorName": "TimeoutError",
            "example": "",
            "id": 69,
            "url": []
        },
        {
            "description": "Base class for warning categories.",
            "errorName": "Warning",
            "example": "",
            "id": 70,
            "url": []
        },
        {
            "description": "Base class for warnings generated by user code.",
            "errorName": "UserWarning",
            "example": "",
            "id": 71,
            "url": []
        },
        {
            "description": "Base class for warnings about deprecated features when those warnings are\nintended for other Python developers.",
            "errorName": "DeprecationWarning",
            "example": "",
            "id": 72,
            "url": []
        },
        {
            "description": "Base class for warnings about features which will be deprecated in the\nfuture.",
            "errorName": "PendingDeprecationWarning",
            "example": "",
            "id": 73,
            "url": []
        },
        {
            "description": "Base class for warnings about dubious syntax.",
            "errorName": "SyntaxWarning",
            "example": "",
            "id": 74,
            "url": []
        },
        {
            "description": "Base class for warnings about dubious runtime behavior.",
            "errorName": "RuntimeWarning",
            "example": "",
            "id": 75,
            "url": []
        },
        {
            "description": "Base class for warnings about deprecated features when those warnings are\nintended for end users of applications that are written in Python.",
            "errorName": "FutureWarning",
            "example": "",
            "id": 76,
            "url": []
        },
        {
            "description": "Base class for warnings about probable mistakes in module imports.",
            "errorName": "ImportWarning",
            "example": "",
            "id": 77,
            "url": []
        },
        {
            "description": "Base class for warnings related to Unicode.",
            "errorName": "UnicodeWarning",
            "example": "",
            "id": 78,
            "url": []
        },
        {
            "description": "Base class for warnings related to bytes and bytearray.",
            "errorName": "BytesWarning",
            "example": "",
            "id": 79,
            "url": []
        },
        {
            "description": "Base class for warnings related to resource usage. Ignored by the default\nwarning filters.\n\nNew in version 3.2.",
            "errorName": "ResourceWarning",
            "example": "",
            "id": 80,
            "url": []
        },
        {
            "description": "The base class for all built-in exceptions.  It is not meant to be directly\ninherited by user-defined classes (for that, use Exception).  If\nstr() is called on an instance of this class, the representation of\nthe argument(s) to the instance are returned, or the empty string when\nthere were no arguments.\n\n\nargs\u00c2\u00b6\nThe tuple of arguments given to the exception constructor.  Some built-in\nexceptions (like OSError) expect a certain number of arguments and\nassign a special meaning to the elements of this tuple, while others are\nusually called only with a single string giving an error message.\n\n\n\nwith_traceback(tb)\u00c2\u00b6\nThis method sets tb as the new traceback for the exception and returns\nthe exception object.  It is usually used in exception handling code like\nthis:\ntry:\n    ...\nexcept SomeException:\n    tb = sys.exc_info()[2]\n    raise OtherException(...).with_traceback(tb)",
            "errorName": "BaseException",
            "example": "",
            "id": 81,
            "url": []
        },
        {
            "description": "The tuple of arguments given to the exception constructor.  Some built-in\nexceptions (like OSError) expect a certain number of arguments and\nassign a special meaning to the elements of this tuple, while others are\nusually called only with a single string giving an error message.",
            "errorName": "args",
            "example": "",
            "id": 82,
            "url": []
        },
        {
            "description": "This method sets tb as the new traceback for the exception and returns\nthe exception object.  It is usually used in exception handling code like\nthis:\ntry:\n    ...\nexcept SomeException:\n    tb = sys.exc_info()[2]\n    raise OtherException(...).with_traceback(tb)",
            "errorName": "with_traceback",
            "example": "",
            "id": 83,
            "url": []
        },
        {
            "description": "All built-in, non-system-exiting exceptions are derived from this class.  All\nuser-defined exceptions should also be derived from this class.",
            "errorName": "Exception",
            "example": "",
            "id": 84,
            "url": []
        },
        {
            "description": "The base class for those built-in exceptions that are raised for various\narithmetic errors: OverflowError, ZeroDivisionError,\nFloatingPointError.",
            "errorName": "ArithmeticError",
            "example": "",
            "id": 85,
            "url": []
        },
        {
            "description": "Raised when a buffer related operation cannot be\nperformed.",
            "errorName": "BufferError",
            "example": "",
            "id": 86,
            "url": []
        },
        {
            "description": "The base class for the exceptions that are raised when a key or index used on\na mapping or sequence is invalid: IndexError, KeyError.  This\ncan be raised directly by codecs.lookup().",
            "errorName": "LookupError",
            "example": "",
            "id": 87,
            "url": []
        },
        {
            "description": "Raised when an assert statement fails.",
            "errorName": "AssertionError",
            "example": "",
            "id": 88,
            "url": []
        },
        {
            "description": "Raised when an attribute reference (see Attribute references) or\nassignment fails.  (When an object does not support attribute references or\nattribute assignments at all, TypeError is raised.)",
            "errorName": "AttributeError",
            "example": "",
            "id": 89,
            "url": []
        },
        {
            "description": "Raised when the input() function hits an end-of-file condition (EOF)\nwithout reading any data. (N.B.: the io.IOBase.read() and\nio.IOBase.readline() methods return an empty string when they hit EOF.)",
            "errorName": "EOFError",
            "example": "",
            "id": 90,
            "url": []
        },
        {
            "description": "Not currently used.",
            "errorName": "FloatingPointError",
            "example": "",
            "id": 91,
            "url": []
        },
        {
            "description": "Raised when a generator or coroutine is closed;\nsee generator.close() and coroutine.close().  It\ndirectly inherits from BaseException instead of Exception since\nit is technically not an error.",
            "errorName": "GeneratorExit",
            "example": "",
            "id": 92,
            "url": []
        },
        {
            "description": "Raised when the import statement has troubles trying to\nload a module.  Also raised when the \u00e2\u0080\u009cfrom list\u00e2\u0080\u009d in from ... import\nhas a name that cannot be found.\nThe name and path attributes can be set using keyword-only\narguments to the constructor. When set they represent the name of the module\nthat was attempted to be imported and the path to any file which triggered\nthe exception, respectively.\n\nChanged in version 3.3: Added the name and path attributes.",
            "errorName": "ImportError",
            "example": "",
            "id": 93,
            "url": []
        },
        {
            "description": "A subclass of ImportError which is raised by import\nwhen a module could not be located.  It is also raised when None\nis found in sys.modules.\n\nNew in version 3.6.",
            "errorName": "ModuleNotFoundError",
            "example": "",
            "id": 94,
            "url": []
        },
        {
            "description": "Raised when a sequence subscript is out of range.  (Slice indices are\nsilently truncated to fall in the allowed range; if an index is not an\ninteger, TypeError is raised.)",
            "errorName": "IndexError",
            "example": "",
            "id": 95,
            "url": []
        },
        {
            "description": "Raised when a mapping (dictionary) key is not found in the set of existing keys.",
            "errorName": "KeyError",
            "example": "",
            "id": 96,
            "url": []
        },
        {
            "description": "Raised when the user hits the interrupt key (normally Control-C or\nDelete).  During execution, a check for interrupts is made\nregularly. The exception inherits from BaseException so as to not be\naccidentally caught by code that catches Exception and thus prevent\nthe interpreter from exiting.",
            "errorName": "KeyboardInterrupt",
            "example": "",
            "id": 97,
            "url": []
        },
        {
            "description": "Raised when an operation runs out of memory but the situation may still be\nrescued (by deleting some objects).  The associated value is a string indicating\nwhat kind of (internal) operation ran out of memory. Note that because of the\nunderlying memory management architecture (C\u00e2\u0080\u0099s malloc() function), the\ninterpreter may not always be able to completely recover from this situation; it\nnevertheless raises an exception so that a stack traceback can be printed, in\ncase a run-away program was the cause.",
            "errorName": "MemoryError",
            "example": "",
            "id": 98,
            "url": []
        },
        {
            "description": "Raised when a local or global name is not found.  This applies only to\nunqualified names.  The associated value is an error message that includes the\nname that could not be found.",
            "errorName": "NameError",
            "example": "",
            "id": 99,
            "url": []
        },
        {
            "description": "This exception is derived from RuntimeError.  In user defined base\nclasses, abstract methods should raise this exception when they require\nderived classes to override the method, or while the class is being\ndeveloped to indicate that the real implementation still needs to be added.\n\nNote\nIt should not be used to indicate that an operator or method is not\nmeant to be supported at all \u00e2\u0080\u0093 in that case either leave the operator /\nmethod undefined or, if a subclass, set it to None.\n\n\nNote\nNotImplementedError and NotImplemented are not interchangeable,\neven though they have similar names and purposes.  See\nNotImplemented for details on when to use it.",
            "errorName": "NotImplementedError",
            "example": "",
            "id": 100,
            "url": []
        },
        {
            "description": "This exception is raised when a system function returns a system-related\nerror, including I/O failures such as \u00e2\u0080\u009cfile not found\u00e2\u0080\u009d or \u00e2\u0080\u009cdisk full\u00e2\u0080\u009d\n(not for illegal argument types or other incidental errors).\nThe second form of the constructor sets the corresponding attributes,\ndescribed below.  The attributes default to None if not\nspecified.  For backwards compatibility, if three arguments are passed,\nthe args attribute contains only a 2-tuple\nof the first two constructor arguments.\nThe constructor often actually returns a subclass of OSError, as\ndescribed in OS exceptions below.  The particular subclass depends on\nthe final errno value.  This behaviour only occurs when\nconstructing OSError directly or via an alias, and is not\ninherited when subclassing.\n\n\nerrno\u00c2\u00b6\nA numeric error code from the C variable errno.\n\n\n\nwinerror\u00c2\u00b6\nUnder Windows, this gives you the native\nWindows error code.  The errno attribute is then an approximate\ntranslation, in POSIX terms, of that native error code.\nUnder Windows, if the winerror constructor argument is an integer,\nthe errno attribute is determined from the Windows error code,\nand the errno argument is ignored.  On other platforms, the\nwinerror argument is ignored, and the winerror attribute\ndoes not exist.\n\n\n\nstrerror\u00c2\u00b6\nThe corresponding error message, as provided by\nthe operating system.  It is formatted by the C\nfunctions perror() under POSIX, and FormatMessage()\nunder Windows.\n\n\n\nfilename\u00c2\u00b6\n\nfilename2\u00c2\u00b6\nFor exceptions that involve a file system path (such as open() or\nos.unlink()), filename is the file name passed to the function.\nFor functions that involve two file system paths (such as\nos.rename()), filename2 corresponds to the second\nfile name passed to the function.\n\n\nChanged in version 3.3: EnvironmentError, IOError, WindowsError,\nsocket.error, select.error and\nmmap.error have been merged into OSError, and the\nconstructor may return a subclass.\n\n\nChanged in version 3.4: The filename attribute is now the original file name passed to\nthe function, instead of the name encoded to or decoded from the\nfilesystem encoding.  Also, the filename2 constructor argument and\nattribute was added.",
            "errorName": "OSError",
            "example": "",
            "id": 101,
            "url": []
        },
        {
            "description": "A numeric error code from the C variable errno.",
            "errorName": "errno",
            "example": "",
            "id": 102,
            "url": []
        },
        {
            "description": "Under Windows, this gives you the native\nWindows error code.  The errno attribute is then an approximate\ntranslation, in POSIX terms, of that native error code.\nUnder Windows, if the winerror constructor argument is an integer,\nthe errno attribute is determined from the Windows error code,\nand the errno argument is ignored.  On other platforms, the\nwinerror argument is ignored, and the winerror attribute\ndoes not exist.",
            "errorName": "winerror",
            "example": "",
            "id": 103,
            "url": []
        },
        {
            "description": "The corresponding error message, as provided by\nthe operating system.  It is formatted by the C\nfunctions perror() under POSIX, and FormatMessage()\nunder Windows.",
            "errorName": "strerror",
            "example": "",
            "id": 104,
            "url": []
        },
        {
            "description": "For exceptions that involve a file system path (such as open() or\nos.unlink()), filename is the file name passed to the function.\nFor functions that involve two file system paths (such as\nos.rename()), filename2 corresponds to the second\nfile name passed to the function.",
            "errorName": "filename",
            "example": "",
            "id": 105,
            "url": []
        },
        {
            "description": "Raised when the result of an arithmetic operation is too large to be\nrepresented.  This cannot occur for integers (which would rather raise\nMemoryError than give up).  However, for historical reasons,\nOverflowError is sometimes raised for integers that are outside a required\nrange.   Because of the lack of standardization of floating point exception\nhandling in C, most floating point operations are not checked.",
            "errorName": "OverflowError",
            "example": "",
            "id": 106,
            "url": []
        },
        {
            "description": "This exception is derived from RuntimeError.  It is raised when the\ninterpreter detects that the maximum recursion depth (see\nsys.getrecursionlimit()) is exceeded.\n\nNew in version 3.5: Previously, a plain RuntimeError was raised.",
            "errorName": "RecursionError",
            "example": "",
            "id": 107,
            "url": []
        },
        {
            "description": "This exception is raised when a weak reference proxy, created by the\nweakref.proxy() function, is used to access an attribute of the referent\nafter it has been garbage collected. For more information on weak references,\nsee the weakref module.",
            "errorName": "ReferenceError",
            "example": "",
            "id": 108,
            "url": []
        },
        {
            "description": "Raised when an error is detected that doesn\u00e2\u0080\u0099t fall in any of the other\ncategories.  The associated value is a string indicating what precisely went\nwrong.",
            "errorName": "RuntimeError",
            "example": "",
            "id": 109,
            "url": []
        },
        {
            "description": "Raised by built-in function next() and an iterator\u00e2\u0080\u0099s\n__next__() method to signal that there are no further\nitems produced by the iterator.\nThe exception object has a single attribute value, which is\ngiven as an argument when constructing the exception, and defaults\nto None.\nWhen a generator or coroutine function\nreturns, a new StopIteration instance is\nraised, and the value returned by the function is used as the\nvalue parameter to the constructor of the exception.\nIf a generator code directly or indirectly raises StopIteration,\nit is converted into a RuntimeError (retaining the\nStopIteration as the new exception\u00e2\u0080\u0099s cause).\n\nChanged in version 3.3: Added value attribute and the ability for generator functions to\nuse it to return a value.\n\n\nChanged in version 3.5: Introduced the RuntimeError transformation via\nfrom __future__ import generator_stop, see PEP 479.\n\n\nChanged in version 3.7: Enable PEP 479 for all code by default: a StopIteration\nerror raised in a generator is transformed into a RuntimeError.",
            "errorName": "StopIteration",
            "example": "",
            "id": 110,
            "url": []
        },
        {
            "description": "Must be raised by __anext__() method of an\nasynchronous iterator object to stop the iteration.\n\nNew in version 3.5.",
            "errorName": "StopAsyncIteration",
            "example": "",
            "id": 111,
            "url": []
        },
        {
            "description": "Raised when the parser encounters a syntax error.  This may occur in an\nimport statement, in a call to the built-in functions exec()\nor eval(), or when reading the initial script or standard input\n(also interactively).\nInstances of this class have attributes filename, lineno,\noffset and text for easier access to the details.  str()\nof the exception instance returns only the message.",
            "errorName": "SyntaxError",
            "example": "",
            "id": 112,
            "url": []
        },
        {
            "description": "Base class for syntax errors related to incorrect indentation.  This is a\nsubclass of SyntaxError.",
            "errorName": "IndentationError",
            "example": "",
            "id": 113,
            "url": []
        },
        {
            "description": "Raised when indentation contains an inconsistent use of tabs and spaces.\nThis is a subclass of IndentationError.",
            "errorName": "TabError",
            "example": "",
            "id": 114,
            "url": []
        },
        {
            "description": "Raised when the interpreter finds an internal error, but the situation does not\nlook so serious to cause it to abandon all hope. The associated value is a\nstring indicating what went wrong (in low-level terms).\nYou should report this to the author or maintainer of your Python interpreter.\nBe sure to report the version of the Python interpreter (sys.version; it is\nalso printed at the start of an interactive Python session), the exact error\nmessage (the exception\u00e2\u0080\u0099s associated value) and if possible the source of the\nprogram that triggered the error.",
            "errorName": "SystemError",
            "example": "",
            "id": 115,
            "url": []
        },
        {
            "description": "This exception is raised by the sys.exit() function.  It inherits from\nBaseException instead of Exception so that it is not accidentally\ncaught by code that catches Exception.  This allows the exception to\nproperly propagate up and cause the interpreter to exit.  When it is not\nhandled, the Python interpreter exits; no stack traceback is printed.  The\nconstructor accepts the same optional argument passed to sys.exit().\nIf the value is an integer, it specifies the system exit status (passed to\nC\u00e2\u0080\u0099s exit() function); if it is None, the exit status is zero; if\nit has another type (such as a string), the object\u00e2\u0080\u0099s value is printed and\nthe exit status is one.\nA call to sys.exit() is translated into an exception so that clean-up\nhandlers (finally clauses of try statements) can be\nexecuted, and so that a debugger can execute a script without running the risk\nof losing control.  The os._exit() function can be used if it is\nabsolutely positively necessary to exit immediately (for example, in the child\nprocess after a call to os.fork()).\n\n\ncode\u00c2\u00b6\nThe exit status or error message that is passed to the constructor.\n(Defaults to None.)",
            "errorName": "SystemExit",
            "example": "",
            "id": 116,
            "url": []
        },
        {
            "description": "The exit status or error message that is passed to the constructor.\n(Defaults to None.)",
            "errorName": "code",
            "example": "",
            "id": 117,
            "url": []
        },
        {
            "description": "Raised when an operation or function is applied to an object of inappropriate\ntype.  The associated value is a string giving details about the type mismatch.\nThis exception may be raised by user code to indicate that an attempted\noperation on an object is not supported, and is not meant to be. If an object\nis meant to support a given operation but has not yet provided an\nimplementation, NotImplementedError is the proper exception to raise.\nPassing arguments of the wrong type (e.g. passing a list when an\nint is expected) should result in a TypeError, but passing\narguments with the wrong value (e.g. a number outside expected boundaries)\nshould result in a ValueError.",
            "errorName": "TypeError",
            "example": "",
            "id": 118,
            "url": []
        },
        {
            "description": "Raised when a reference is made to a local variable in a function or method, but\nno value has been bound to that variable.  This is a subclass of\nNameError.",
            "errorName": "UnboundLocalError",
            "example": "",
            "id": 119,
            "url": []
        },
        {
            "description": "Raised when a Unicode-related encoding or decoding error occurs.  It is a\nsubclass of ValueError.\nUnicodeError has attributes that describe the encoding or decoding\nerror.  For example, err.object[err.start:err.end] gives the particular\ninvalid input that the codec failed on.\n\n\nencoding\u00c2\u00b6\nThe name of the encoding that raised the error.\n\n\n\nreason\u00c2\u00b6\nA string describing the specific codec error.\n\n\n\nobject\u00c2\u00b6\nThe object the codec was attempting to encode or decode.\n\n\n\nstart\u00c2\u00b6\nThe first index of invalid data in object.\n\n\n\nend\u00c2\u00b6\nThe index after the last invalid data in object.",
            "errorName": "UnicodeError",
            "example": "",
            "id": 120,
            "url": []
        },
        {
            "description": "The name of the encoding that raised the error.",
            "errorName": "encoding",
            "example": "",
            "id": 121,
            "url": []
        },
        {
            "description": "A string describing the specific codec error.",
            "errorName": "reason",
            "example": "",
            "id": 122,
            "url": []
        },
        {
            "description": "The object the codec was attempting to encode or decode.",
            "errorName": "object",
            "example": "",
            "id": 123,
            "url": []
        },
        {
            "description": "The first index of invalid data in object.",
            "errorName": "start",
            "example": "",
            "id": 124,
            "url": []
        },
        {
            "description": "The index after the last invalid data in object.",
            "errorName": "end",
            "example": "",
            "id": 125,
            "url": []
        },
        {
            "description": "Raised when a Unicode-related error occurs during encoding.  It is a subclass of\nUnicodeError.",
            "errorName": "UnicodeEncodeError",
            "example": "",
            "id": 126,
            "url": []
        },
        {
            "description": "Raised when a Unicode-related error occurs during decoding.  It is a subclass of\nUnicodeError.",
            "errorName": "UnicodeDecodeError",
            "example": "",
            "id": 127,
            "url": []
        },
        {
            "description": "Raised when a Unicode-related error occurs during translating.  It is a subclass\nof UnicodeError.",
            "errorName": "UnicodeTranslateError",
            "example": "",
            "id": 128,
            "url": []
        },
        {
            "description": "Raised when an operation or function receives an argument that has the\nright type but an inappropriate value, and the situation is not described by a\nmore precise exception such as IndexError.",
            "errorName": "ValueError",
            "example": "",
            "id": 129,
            "url": []
        },
        {
            "description": "Raised when the second argument of a division or modulo operation is zero.  The\nassociated value is a string indicating the type of the operands and the\noperation.",
            "errorName": "ZeroDivisionError",
            "example": "",
            "id": 130,
            "url": []
        },
        {
            "description": "",
            "errorName": "EnvironmentError",
            "example": "",
            "id": 131,
            "url": []
        },
        {
            "description": "",
            "errorName": "IOError",
            "example": "",
            "id": 132,
            "url": []
        },
        {
            "description": "Only available on Windows.",
            "errorName": "WindowsError",
            "example": "",
            "id": 133,
            "url": []
        },
        {
            "description": "Raised when an operation would block on an object (e.g. socket) set\nfor non-blocking operation.\nCorresponds to errno EAGAIN, EALREADY,\nEWOULDBLOCK and EINPROGRESS.\nIn addition to those of OSError, BlockingIOError can have\none more attribute:\n\n\ncharacters_written\u00c2\u00b6\nAn integer containing the number of characters written to the stream\nbefore it blocked.  This attribute is available when using the\nbuffered I/O classes from the io module.",
            "errorName": "BlockingIOError",
            "example": "",
            "id": 134,
            "url": []
        },
        {
            "description": "An integer containing the number of characters written to the stream\nbefore it blocked.  This attribute is available when using the\nbuffered I/O classes from the io module.",
            "errorName": "characters_written",
            "example": "",
            "id": 135,
            "url": []
        },
        {
            "description": "Raised when an operation on a child process failed.\nCorresponds to errno ECHILD.",
            "errorName": "ChildProcessError",
            "example": "",
            "id": 136,
            "url": []
        },
        {
            "description": "A base class for connection-related issues.\nSubclasses are BrokenPipeError, ConnectionAbortedError,\nConnectionRefusedError and ConnectionResetError.",
            "errorName": "ConnectionError",
            "example": "",
            "id": 137,
            "url": []
        },
        {
            "description": "A subclass of ConnectionError, raised when trying to write on a\npipe while the other end has been closed, or trying to write on a socket\nwhich has been shutdown for writing.\nCorresponds to errno EPIPE and ESHUTDOWN.",
            "errorName": "BrokenPipeError",
            "example": "",
            "id": 138,
            "url": []
        },
        {
            "description": "A subclass of ConnectionError, raised when a connection attempt\nis aborted by the peer.\nCorresponds to errno ECONNABORTED.",
            "errorName": "ConnectionAbortedError",
            "example": "",
            "id": 139,
            "url": []
        },
        {
            "description": "A subclass of ConnectionError, raised when a connection attempt\nis refused by the peer.\nCorresponds to errno ECONNREFUSED.",
            "errorName": "ConnectionRefusedError",
            "example": "",
            "id": 140,
            "url": []
        },
        {
            "description": "A subclass of ConnectionError, raised when a connection is\nreset by the peer.\nCorresponds to errno ECONNRESET.",
            "errorName": "ConnectionResetError",
            "example": "",
            "id": 141,
            "url": []
        },
        {
            "description": "Raised when trying to create a file or directory which already exists.\nCorresponds to errno EEXIST.",
            "errorName": "FileExistsError",
            "example": "",
            "id": 142,
            "url": []
        },
        {
            "description": "Raised when a file or directory is requested but doesn\u00e2\u0080\u0099t exist.\nCorresponds to errno ENOENT.",
            "errorName": "FileNotFoundError",
            "example": "",
            "id": 143,
            "url": []
        },
        {
            "description": "Raised when a system call is interrupted by an incoming signal.\nCorresponds to errno EINTR.\n\nChanged in version 3.5: Python now retries system calls when a syscall is interrupted by a\nsignal, except if the signal handler raises an exception (see PEP 475\nfor the rationale), instead of raising InterruptedError.",
            "errorName": "InterruptedError",
            "example": "",
            "id": 144,
            "url": []
        },
        {
            "description": "Raised when a file operation (such as os.remove()) is requested\non a directory.\nCorresponds to errno EISDIR.",
            "errorName": "IsADirectoryError",
            "example": "",
            "id": 145,
            "url": []
        },
        {
            "description": "Raised when a directory operation (such as os.listdir()) is requested\non something which is not a directory.\nCorresponds to errno ENOTDIR.",
            "errorName": "NotADirectoryError",
            "example": "",
            "id": 146,
            "url": []
        },
        {
            "description": "Raised when trying to run an operation without the adequate access\nrights - for example filesystem permissions.\nCorresponds to errno EACCES and EPERM.",
            "errorName": "PermissionError",
            "example": "",
            "id": 147,
            "url": []
        },
        {
            "description": "Raised when a given process doesn\u00e2\u0080\u0099t exist.\nCorresponds to errno ESRCH.",
            "errorName": "ProcessLookupError",
            "example": "",
            "id": 148,
            "url": []
        },
        {
            "description": "Raised when a system function timed out at the system level.\nCorresponds to errno ETIMEDOUT.",
            "errorName": "TimeoutError",
            "example": "",
            "id": 149,
            "url": []
        },
        {
            "description": "Raised when an operation would block on an object (e.g. socket) set\nfor non-blocking operation.\nCorresponds to errno EAGAIN, EALREADY,\nEWOULDBLOCK and EINPROGRESS.\nIn addition to those of OSError, BlockingIOError can have\none more attribute:\n\n\ncharacters_written\u00c2\u00b6\nAn integer containing the number of characters written to the stream\nbefore it blocked.  This attribute is available when using the\nbuffered I/O classes from the io module.",
            "errorName": "BlockingIOError",
            "example": "",
            "id": 150,
            "url": []
        },
        {
            "description": "An integer containing the number of characters written to the stream\nbefore it blocked.  This attribute is available when using the\nbuffered I/O classes from the io module.",
            "errorName": "characters_written",
            "example": "",
            "id": 151,
            "url": []
        },
        {
            "description": "Raised when an operation on a child process failed.\nCorresponds to errno ECHILD.",
            "errorName": "ChildProcessError",
            "example": "",
            "id": 152,
            "url": []
        },
        {
            "description": "A base class for connection-related issues.\nSubclasses are BrokenPipeError, ConnectionAbortedError,\nConnectionRefusedError and ConnectionResetError.",
            "errorName": "ConnectionError",
            "example": "",
            "id": 153,
            "url": []
        },
        {
            "description": "A subclass of ConnectionError, raised when trying to write on a\npipe while the other end has been closed, or trying to write on a socket\nwhich has been shutdown for writing.\nCorresponds to errno EPIPE and ESHUTDOWN.",
            "errorName": "BrokenPipeError",
            "example": "",
            "id": 154,
            "url": []
        },
        {
            "description": "A subclass of ConnectionError, raised when a connection attempt\nis aborted by the peer.\nCorresponds to errno ECONNABORTED.",
            "errorName": "ConnectionAbortedError",
            "example": "",
            "id": 155,
            "url": []
        },
        {
            "description": "A subclass of ConnectionError, raised when a connection attempt\nis refused by the peer.\nCorresponds to errno ECONNREFUSED.",
            "errorName": "ConnectionRefusedError",
            "example": "",
            "id": 156,
            "url": []
        },
        {
            "description": "A subclass of ConnectionError, raised when a connection is\nreset by the peer.\nCorresponds to errno ECONNRESET.",
            "errorName": "ConnectionResetError",
            "example": "",
            "id": 157,
            "url": []
        },
        {
            "description": "Raised when trying to create a file or directory which already exists.\nCorresponds to errno EEXIST.",
            "errorName": "FileExistsError",
            "example": "",
            "id": 158,
            "url": []
        },
        {
            "description": "Raised when a file or directory is requested but doesn\u00e2\u0080\u0099t exist.\nCorresponds to errno ENOENT.",
            "errorName": "FileNotFoundError",
            "example": "",
            "id": 159,
            "url": []
        },
        {
            "description": "Raised when a system call is interrupted by an incoming signal.\nCorresponds to errno EINTR.\n\nChanged in version 3.5: Python now retries system calls when a syscall is interrupted by a\nsignal, except if the signal handler raises an exception (see PEP 475\nfor the rationale), instead of raising InterruptedError.",
            "errorName": "InterruptedError",
            "example": "",
            "id": 160,
            "url": []
        },
        {
            "description": "Raised when a file operation (such as os.remove()) is requested\non a directory.\nCorresponds to errno EISDIR.",
            "errorName": "IsADirectoryError",
            "example": "",
            "id": 161,
            "url": []
        },
        {
            "description": "Raised when a directory operation (such as os.listdir()) is requested\non something which is not a directory.\nCorresponds to errno ENOTDIR.",
            "errorName": "NotADirectoryError",
            "example": "",
            "id": 162,
            "url": []
        },
        {
            "description": "Raised when trying to run an operation without the adequate access\nrights - for example filesystem permissions.\nCorresponds to errno EACCES and EPERM.",
            "errorName": "PermissionError",
            "example": "",
            "id": 163,
            "url": []
        },
        {
            "description": "Raised when a given process doesn\u00e2\u0080\u0099t exist.\nCorresponds to errno ESRCH.",
            "errorName": "ProcessLookupError",
            "example": "",
            "id": 164,
            "url": []
        },
        {
            "description": "Raised when a system function timed out at the system level.\nCorresponds to errno ETIMEDOUT.",
            "errorName": "TimeoutError",
            "example": "",
            "id": 165,
            "url": []
        },
        {
            "description": "Base class for warning categories.",
            "errorName": "Warning",
            "example": "",
            "id": 166,
            "url": []
        },
        {
            "description": "Base class for warnings generated by user code.",
            "errorName": "UserWarning",
            "example": "",
            "id": 167,
            "url": []
        },
        {
            "description": "Base class for warnings about deprecated features when those warnings are\nintended for other Python developers.",
            "errorName": "DeprecationWarning",
            "example": "",
            "id": 168,
            "url": []
        },
        {
            "description": "Base class for warnings about features which will be deprecated in the\nfuture.",
            "errorName": "PendingDeprecationWarning",
            "example": "",
            "id": 169,
            "url": []
        },
        {
            "description": "Base class for warnings about dubious syntax.",
            "errorName": "SyntaxWarning",
            "example": "",
            "id": 170,
            "url": []
        },
        {
            "description": "Base class for warnings about dubious runtime behavior.",
            "errorName": "RuntimeWarning",
            "example": "",
            "id": 171,
            "url": []
        },
        {
            "description": "Base class for warnings about deprecated features when those warnings are\nintended for end users of applications that are written in Python.",
            "errorName": "FutureWarning",
            "example": "",
            "id": 172,
            "url": []
        },
        {
            "description": "Base class for warnings about probable mistakes in module imports.",
            "errorName": "ImportWarning",
            "example": "",
            "id": 173,
            "url": []
        },
        {
            "description": "Base class for warnings related to Unicode.",
            "errorName": "UnicodeWarning",
            "example": "",
            "id": 174,
            "url": []
        },
        {
            "description": "Base class for warnings related to bytes and bytearray.",
            "errorName": "BytesWarning",
            "example": "",
            "id": 175,
            "url": []
        },
        {
            "description": "Base class for warnings related to resource usage. Ignored by the default\nwarning filters.\n\nNew in version 3.2.",
            "errorName": "ResourceWarning",
            "example": "",
            "id": 176,
            "url": []
        }
    ]
}